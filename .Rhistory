geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(ventilation_support_level_modified.44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
xlab = 'Predicted Probabilities (44 Week Model)',
ylab = 'Count')
grid.arrange(plot_1, plot_2, nrow = 1)
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(ventilation_support_level.36)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_2 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(ventilation_support_level_modified.44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2, nrow = 1)
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(pren_ster)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_1
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(prenat_ster)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_1
plot_7 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(med_ph.36)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_8 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(med.ph_44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2,
plot_3, plot_4,
plot_5, plot_6,
plot_7, plot_8, nrow = 4, ncol = 2)
library(gridExtra)
x_vars <- model.matrix(Trach ~ ., data = test_data_long)
x_vars_44 <- x_vars[,names(avg_coefs_44)]
x_vars_36 <- x_vars[,names(avg_coefs_36)]
test_data_long$score_36 <- as.numeric(x_vars_36 %*% avg_coefs_36)
test_data_long$score_44 <- as.numeric(x_vars_44 %*% avg_coefs_44)
model_36 <- glm(Trach ~ score_36, data = test_data_long, family = "binomial")
model_44 <- glm(Trach ~ score_44, data = test_data_long, family = "binomial")
pred_36 <- predict(model_36, type = "response")
pred_44 <- predict(model_44, type = "response")
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(ventilation_support_level.36)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_2 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(ventilation_support_level_modified.44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2, nrow = 1)
plot_3 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(prenat_ster)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_4 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(prenat_ster))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_3, plot_4, nrow = 1)
plot_5 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(SGA)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_6 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(SGA))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
plot_7 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(med_ph.36)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_8 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(med.ph_44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2,
plot_3, plot_4,
plot_5, plot_6,
plot_7, plot_8, nrow = 4, ncol = 2)
library(gridExtra)
x_vars <- model.matrix(Trach ~ ., data = test_data_long)
x_vars_44 <- x_vars[,names(avg_coefs_44)]
x_vars_36 <- x_vars[,names(avg_coefs_36)]
test_data_long$score_36 <- as.numeric(x_vars_36 %*% avg_coefs_36)
test_data_long$score_44 <- as.numeric(x_vars_44 %*% avg_coefs_44)
model_36 <- glm(Trach ~ score_36, data = test_data_long, family = "binomial")
model_44 <- glm(Trach ~ score_44, data = test_data_long, family = "binomial")
pred_36 <- predict(model_36, type = "response")
pred_44 <- predict(model_44, type = "response")
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(ventilation_support_level.36)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_2 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(ventilation_support_level_modified.44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2, nrow = 1)
plot_3 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(prenat_ster)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_4 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(prenat_ster))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_3, plot_4, nrow = 1)
plot_5 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(sga)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_6 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(sga))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
plot_7 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(med_ph.36)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count')
plot_8 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(med.ph_44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2,
plot_3, plot_4,
plot_5, plot_6,
plot_7, plot_8, nrow = 4, ncol = 2)
plot_8 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_44)) +
facet_grid(rows = vars(med_ph.44))+
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x = 'Predicted Probabilities (44 Week Model)',
y = 'Count')
grid.arrange(plot_1, plot_2,
plot_3, plot_4,
plot_5, plot_6,
plot_7, plot_8, nrow = 4, ncol = 2)
unique(data$center)
data %>% group_by(mat_ethn) %>% summarise(n())
74/996
data <- read.csv('../project2.csv')
data <- select_if(is.numeric)
data <- mutate_at(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"), function(x) (x - mean(x))/sd(x))
data <- data %>%
mutate_at(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"), function(x) (x - mean(x))/sd(x))
data <- data %>%
mutate_at(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"), function(x) (x - mean(x))/sd(x)) %>%
select(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"))
data
data <- data %>%
mutate_at(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"), function(x) (x - mean(x, na.rm = TRUE))/sd(x, na.rm=TRUE)) %>%
select(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"))
data
head(data)
data <- read.csv('../project2.csv')
head(data)
data <- data %>%
mutate_at(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"), function(x) (x - mean(x, na.rm = TRUE))/sd(x, na.rm=TRUE)) %>%
select(c("bw", "weight_today.36", "inspired_oxygen.36", "p_delta.36",
"peep_cm_h2o_modified.36", "weight_today.44", "inspired_oxygen.44",
"p_delta.44", "peep_cm_h2o_modified.44"))
data
boxplot(data$bw)$out
data %>%
summarise_all(range(), na.rm = TRUE)
data %>%
summarise_all(list(min, max))
data %>%
summarise_all(list(min, max, na.rm = TRUE))
data %>%
summarise_all(list(min(na.rm = TRUE), max(na.rm = TRUE)))
data %>%
summarise(across(everything(), list(min = min, max = max)))
data %>%
summarise(across(everything(), range(., na.rm = TRUE)))
data %>%
summarise_all(range(., na.rm=TRUE))
data %>%
summarise_all(funs(range(.), na.rm=TRUE))
data %>%
summarise_all(list(range = range, na.rm=TRUE))
data %>%
summarise_all(list(range = range), na.rm=TRUE))
data %>%
summarise_all(list(range = range), na.rm=TRUE)
data %>%
summarise_all(list(min = min, max = max), na.rm=TRUE)
vent_levels <- list(
'0'="No Support",
'1'="Non-Invasive Support",
'2'="Invasive Support",
)
vent_levels <- list(
'0'="No Support",
'1'="Non-Invasive Support",
'2'="Invasive Support"
)
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(ventilation_support_level.36), labeller = as_labeller(vent_levels)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count') +
theme(text=element_text(size=6))
plot_1
vent_levels <- c(
'0'="No Support",
'1'="Non-Invasive Support",
'2'="Invasive Support"
)
plot_1 <- ggplot(test_data_long) +
geom_histogram(aes(x = pred_36)) +
facet_grid(rows = vars(ventilation_support_level.36), labeller = as_labeller(vent_levels)) +
labs(title = 'Distribution of Predicted Probabilities by Ventilation Support Level',
x= 'Predicted Probabilities (36 Week Model)',
y = 'Count') +
theme(text=element_text(size=6))
plot_1
sga_levels <- c('0': 'No',
'1': 'Yes')
sga_levels <- c('0'='No',
'1'='Yes')
med_ph_levels <- c('0'='No',
'1'='Yes')
training_data <- data_generation(seed = 1, n = 100, p = 10, s = 5, beta_type = 1, rho = 0.35, v = 0.42)
# Load in MASS Library
library(MASS)
# Generate the sigma matrix - used in the generation of X and Y
generate_sigma <- function(rho, p) {
sig <- matrix(rep(1, p*p), nrow = p, ncol = p)
for (i in 1:p) {
for (j in 1:p) {
sig[i,j] <- rho^(abs(i - j))
}
}
return(sig)
}
# Generate X, Y, and betas
data_generation <- function(seed, n, p, s, beta_type, rho, v) {
#' Given parameters, generate a vector of betas, an X matrix, and a response vector.
#'
#' @param seed seed for random generation
#' @param n number of rows
#' @param p number of covariates
#' @param beta_type patterns of sparsity, either 1, 2, 3 and 5
#' @param rho correlation
#' @param v signal to noise ratio
#
#' @return list containing X, Y, beta0
set.seed(seed)
# Initialize beta
beta0 <- rep(0, p)
# Beta calculation based on beta type
if (beta_type == 1) {
indices <- round(seq(1, p, length.out = s))
beta0[indices] <- 1
} else if (beta_type == 2) {
beta0[1:s] <- 1
} else if (beta_type == 3) {
beta0[1:s] <- seq(10, 0.5, length.out = s)
} else if (beta_type == 5) {
beta0[1:s] <- 1
for (i in (s+1):p) {
beta0[i] <- 0.5^(i - s)
}
}
# Generate X
sigma <- generate_sigma(rho, p)
X <- mvrnorm(n, rep(0,p), sigma)
# Generate Y
var <- as.numeric((t(beta0) %*% sigma %*% beta0)/v)
mu <- X %*% beta0
Y <- mvrnorm(mu = mu, Sigma = var * diag(n))
return(list(beta=beta0, X=X, Y=Y,sigma=sigma,var=var))
}
training_data <- data_generation(seed = 1, n = 100, p = 10, s = 5, beta_type = 1, rho = 0.35, v = 0.42)
validation_data <- data_generation(seed = 2, n = 100, p = 10, s = 5, beta_type = 1, rho = 0.35, v = 0.42)
training_data
glm(training_data$Y)
training_data$Y
lm(Y ~ X, data = training_data)
coef(lm(Y ~ X, data = training_data))
coef(lm(Y ~ X, data = training_data))[2]
training_data <- data_generation(seed = 1, n = 100, p = 1, s = 5, beta_type = 1, rho = 0.35, v = 0.42)
coef(lm(Y ~ X, data = training_data))[2]
coef(lm(Y ~ X, data = training_data))
vif(lm(Y ~ X, data = training_data))
library(regclass)
install.packages('regclass')
library(regclass)
vif(lm(Y ~ X, data = training_data))
VIF(lm(Y ~ X, data = training_data))
lm(Y ~ X, data = training_data)
mod <- lm(Y ~ X, data = training_data)
mod$terms
model$effects
model$boundary
summary(model)
validation_data <- data_generation(seed = 2, n = 100, p = 10, s = 5, beta_type = 1, rho = 0.35, v = 0.42)
summary(model)[1]
summary(model)[2]
summary(model)[3]
summary(model)[4]
summary(model)[5]
summary(model)[6]
summary(model)[2]
summary(model)
summary(model)$coefficients
summary(model)$coefficients[4,]
summary(model)$coefficients[3,]
summary(model)$coefficients[2]
summary(model)$coefficients[2,4]
data <- simulate_data(beta1 = 1)
simulate_data <- function(m = 100, beta0 = 0, beta1, mean_x = 0, sd_x = 1) {
x <- rnorm(n = m, mean = mean_x, sd = sd_x)
eps <- rnorm(m, 0, 1)
y <- beta0 + beta1*x + eps
return(data.frame(x = x, y = y))
}
calculate_estimator <- function(data, alpha) {
n <- length(data$x)
sigma <- sd(data$x)
var <- sigma^2
model <- lm(y ~ x, data = data)
beta_hat <- coef(model)
p_val <- summary(model)$coefficients[2,4]
if (p_val >= alpha) {
beta_hat <- coef(lm(y ~ 1, data = data))
return(list(beta_hat = beta_hat,
beta_alpha = 0))
} else {
return(list(beta_hat = beta_hat,
beta_alpha = beta_hat[2]))
}
}
data <- simulate_data(beta1 = 1)
summary(lm(y ~ x, data = data))
calculate_estimator(data, 0.05)
summary(lm(y ~ x, data = data))
alpha_grid <- seq(0.01, 0.1, by = 0.01)
alpha_grid <- seq(0.01, 0.1, by = 0.01)
n <- seq(0.1, 1, seq = 0.1)
n <- seq(0.1, 1, by = 0.1)
alpha_grid <- seq(0.01, 0.1, by = 0.01)
n <- seq(0.1, 1, by = 0.1)
beta1_grid <- seq(0, 10, by = 0.1)
beta0_grid <- beta1_grid/n
length(beta1_grid)
beta1_grid <- seq(1, 10, by = 0.1)
n <- seq(0.1, 1, by = 0.1)
length(n)
n <- seq(0.1, 1, by = 0.01)
length(n)
n <- seq(0.01, 1, by = 0.01)
length(n)
beta1_grid <- seq(1, 10, by = 0.1)
length(beta1_grid)
beta1_grid <- seq(0, 10, by = 0.1)
length(beta1_grid)
n <- seq(0.01, 1, by = 0.01)
length(n)
n <- seq(0.01, 1, by = 0.1)
length(n)
n <- seq(0.1, 1, by = 0.01)
length(n)
beta1_grid <- seq(1, 10, by = 0.1)
beta0_grid <- beta1_grid/n
n_iters <- length(alpha_grid) * length(beta1_grid) * length(beta0_grid)
n_iters
beta1_grid <- seq(1, 5, by = 0.1)
length(beta1_grid)
n <- seq(0.1, 1, by = 0.1)
length(n)
beta1_grid <- seq(0, 5, by = 1)
length(beta1_grid)
beta0_grid <- beta1_grid/n
beta0_grid
beta1_grid <- seq(0, 5, by = 1)
beta1_grid
beta0_grid <- beta1_grid/n
beta0_grid
1/0.01
alpha_grid <- seq(0.01, 0.1, by = 0.01)
beta1_grid <- seq(0, 5, by = 1)
beta0_grid <- c()
for(i in 1:length(beta1_grid)) {
for (val in n) {
beta0_grid <- c(beta0_grid, beta1_grid[i]/val)
}
}
beta0_grid
expand.grid(alpha_grid, beta1_grid, beta0_grid)
grid <- expand.grid(alpha_grid, beta1_grid, beta0_grid)
View(grid)
full_grid <- expand.grid(alpha_grid, beta1_grid, beta0_grid)
full_grid <- expand.grid(alpha = alpha_grid, beta1 = beta1_grid, beta0 = beta0_grid)
full_grid
View(full_grid)
full_grid$bias <- NA
for (i in 1:nrow(full_grid)) {
data <- simulate_data(beta0 = full_grid$beta0[i], beta1 = full_grid$beta1[i])
est <- calculate_estimator(data, full_grid$alpha[i])$beta_alpha
full_grid$bias[i] <- est - full_grid[i,2]
}
full_grid
n
View(full_grid)
mean(full_grid$bias)
plot(1:length(full_grid), full_grid$bias)
plot(1:nrow(full_grid), full_grid$bias)
View(full_grid)
dat <- full_grid %>%
filter(beta0 == 0) %>%
select(bias)
dat <- full_grid %>%
filter(beta0 == 0)
dat <- full_grid %>%
filter(beta0 == 0) %>%
dplyr::select(bias)
dat <- full_grid %>%
filter(beta0 == 0) %>%
dplyr::select(beta1, bias)
plot(beta1, dat$bias)
plot(dat$beta1, dat$bias)
dat <- full_grid %>%
filter(beta0 == 0 & alpha == 0.05) %>%
dplyr::select(beta1, bias)
plot(dat$beta1, dat$bias)
dat
full_grid %>%
filter(beta0 == 0 & alpha == 0.05)
full_grid <- expand.grid(alpha = alpha_grid, beta1 = beta1_grid, beta0 = beta1_grid/n)
length(full_grid)
dim(full_grid)
full_grid$bias <- NA
for (i in 1:nrow(full_grid)) {
data <- simulate_data(beta0 = full_grid$beta0[i], beta1 = full_grid$beta1[i])
est <- calculate_estimator(data, full_grid$alpha[i])$beta_alpha
full_grid$bias[i] <- est - full_grid[i,2]
}
mean(full_grid$bias)
full_grid %>%
filter(beta0 == 0 & alpha == 0.05)
plot(dat$beta1, dat$bias)
dat <- full_grid %>%
filter(beta0 == 0 & alpha == 0.05) %>%
dplyr::select(beta1, bias)
plot(dat$beta1, dat$bias)
